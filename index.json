{
  "CODE_OF_CONDUCT.html": {
    "href": "CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct | Docs",
    "keywords": "Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@crowdin.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing | Docs",
    "keywords": "Contributing üéâ First off, thanks for taking the time to contribute! üéâ The Crowdin API client provides methods that essentially call Crowdin's APIs. This makes it much easier for other developers to make calls to Crowdin's APIs, as the client abstracts a lot of the work required. In short, the API client provides a lightweight interface for making API requests to Crowdin. The following is a set of guidelines for contributing to Crowdin .NET Client. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. This project and everyone participating in it are governed by the Code of Conduct . By participating, you are expected to uphold this code. How can I contribute? Star this repo It's quick and goes a long way! üå† Reporting Bugs This section guides you through submitting a bug report for Crowdin .NET Client. Following these guidelines helps maintainers, and the community understand your report üìù, reproduce the behavior üíª, and find related reports üîé. When you are creating a bug report, please include as many details as possible. How Do I Submit a Bug Report? Bugs are tracked as GitHub issues . Explain the problem and include additional details to help reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. Don't just say what you did, but explain how you did it. Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Include details about your environment. Suggesting Enhancements This section guides you through submitting an enhancement suggestion for Crowdin .NET Client. Following these guidelines helps maintainers and the community understand your suggestion üìù and find related suggestions üîé. When you are creating an enhancement suggestion, please include as many details as possible. How Do I Submit an Enhancement Suggestion? Enhancement suggestions are tracked as GitHub issues . Create an issue on that repository and provide the following information: Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Describe the current behavior and explain which behavior you expected to see instead and why. Explain why this enhancement would be useful to most .NET Client users. Your First Code Contribution Unsure where to begin contributing to Crowdin .NET Client? You can start by looking through these good-first-issue and help-wanted issues: Good first issue - issues which should only require a small amount of code, and a test or two. Help wanted - issues which should be a bit more involved than Good first issue issues. Pull Request Checklist Before sending your pull requests, make sure you followed the list below: Read these guidelines. Read Code of Conduct . Ensure that your code adheres to standard conventions, as used in the rest of the project. Ensure that there are unit tests for your code. Run unit tests. Note This project uses the Conventional Commits specification for commit messages and PR titles. Philosophy of code contribution Include unit tests when you contribute new features, as they help to a) prove that your code works correctly, and b) guard against future breaking changes to lower the maintenance cost. Bug fixes also generally require unit tests, because the presence of bugs usually indicates insufficient test coverage."
  },
  "README.html": {
    "href": "README.html",
    "title": "Crowdin .NET client | Docs",
    "keywords": "Crowdin .NET client The Crowdin .NET client is a lightweight interface to the Crowdin API. It provides common services for making API requests. Our API is a full-featured RESTful API that helps you to integrate localization into your development process. The endpoints that we use allow you to easily make calls to retrieve information and perform necessary actions. Docs | Examples | Crowdin API | Crowdin Enterprise API Requirements .NET Standard 2.0 support C# language version - 8.0+ Installation Install via NuGet: // Package Manager Install-Package Crowdin.Api -Version 2.39.0 // .Net CLI dotnet add package Crowdin.Api --version 2.39.0 // Package Reference <PackageReference Include=\"Crowdin.Api\" Version=\"2.39.0\" /> // Paket CLI paket add Crowdin.Api --version 2.39.0 Usage examples Initialization Instantiate a client with all available APIs: var credentials = new CrowdinCredentials { AccessToken = \"<paste token here>\", Organization = \"organizationName (for Crowdin Enterprise only)\" }; var client = new CrowdinApiClient(credentials); Or use only the executors you need: var credentials = new CrowdinCredentials { AccessToken = \"<paste token here>\", Organization = \"organizationName (for Crowdin Enterprise only)\" }; var client = new CrowdinApiClient(credentials); var executor = new SourceFilesApiExecutor(client); Storage List storages ResponseList<StorageResource> storages = await client.Storage.ListStorages(); Add storage await using FileStream fileStream = File.Open(\"/path/to/file\", FileMode.Open); StorageResource storageResource = await client.Storage.AddStorage(fileStream, filename: \"MyFile\"); Projects List projects ResponseList<EnterpriseProject> response = await client.ProjectsGroups.ListProjects<EnterpriseProject>(); Edit project const int projectId = 1; // Edit info & settings with one request var patches = new List<ProjectPatch> { // Edit project info new ProjectInfoPatch { Value = \"name\", Path = ProjectInfoPathCode.Cname, Operation = PatchOperation.Replace }, new ProjectInfoPatch { Value = \"value here\", Path = new ProjectInfoPath(ProjectInfoPathCode.LanguageMapping, \"languageId\", \"mapping\"), Operation = PatchOperation.Test }, // Edit project settings new ProjectSettingPatch { Value = true, Path = ProjectSettingPathCode.AutoSubstitution, Operation = PatchOperation.Replace } }; // PATCH request var projectSettingsResponse = await client.ProjectsGroups.EditProject<ProjectSettings>(projectId, patches); Console.WriteLine(projectSettingsResponse); GraphQL API This SDK also has the support of GraphQL API . const string Query = \"\"\" query { viewer { projects(first: 50) { edges { node { name files(first: 10) { totalCount edges { node { name type } } } } } } } } \"\"\"; var request = new GraphQLRequest { Query = Query }; JObject? response = await _crowdinApiClient.GraphQL.ExecuteQuery(request); string[] projectNames = response[\"data\"][\"viewer\"][\"projects\"][\"edges\"] .Select(edge => edge[\"node\"][\"name\"].Value<string>()) .Where(projectNames => !string.IsNullOrWhiteSpace(projectNames)) .ToArray(); Console.WriteLine( \"Project names:\\n - {0}\", string.Join(\"\\n - \", projectNames.Select((name, i) => $\"{i + 1}) {name}\"))); Fetch all records Get a list of all the data available from the API via automatic pagination control: const int parentId = 1; const int maxAmountOfItems = 50; // amount of needed items. Optional parameter, default: no limit const int amountPerRequest = 10; // amount of items in response per 1 request. Optional parameter, default: 25 Group[] allGroups = await CrowdinApiClient.WithFetchAll((limit, offset) => { Console.WriteLine(\"Limit: {0} | Offset: {1}\", limit, offset); return client.ProjectsGroups.ListGroups(parentId, limit, offset); }, maxAmountOfItems, amountPerRequest); Only for list async methods that return Task<ResponseList<T>> . Sorting An optional orderBy parameter is used to apply sorting. var executor = new ProjectsGroupsApiExecutor(mockClient.Object); ResponseList<EnterpriseProject> projectsList = await executor.ListProjects<EnterpriseProject>( userId, groupId, hasManagerAccess, orderBy: new[] { new SortingRule { Field = \"createdAt\", Order = SortingOrder.Descending }, new SortingRule { Field = \"name\", Order = SortingOrder.Ascending } }); Property SortingRule.Order is also optional (ascending order applied by default). Rate limiting API client has built-in support for rate limiting services. The library provides an implementation of Exponential Backoff Algorithm. Usage: var rateLimiter = new ExponentialBackoffRateLimiter(new RateLimitConfiguration { // Maximum attempts count MaxAttempts = 5, // Maximum delay (top limit) MaxDelay = TimeSpan.FromSeconds(5), // Initial delay (bottom limit) InitialDelay = TimeSpan.FromMilliseconds(200), }); // Pass created Rate Limiter instance as named argument to API client instance // If rate limiter not passed - the request will fail immediately after HTTP 429 Too Many Requests error var client = new CrowdinApiClient(new CrowdinCredentials { AccessToken = \"<paste token here>\", Organization = \"optional organization (for Enterprise API)\" }, rateLimiter: rateLimiter); A custom rate limiting service should also implement the IRateLimiter interface. Rate limiting is disabled by default because users may be using custom resilience approaches (such as Polly ) that may conflict with each other. This solution only covers simple resilience cases. If you need advanced customization - please try Polly or alternatives. Retry configuration Pass retry service (built-in or custom): IRetryService myRetryService = new RetryService(new RetryConfiguration { RetriesCount = 5, WaitIntervalMilliseconds = 1000, SkipRetryConditions = { exception => ((CrowdinApiException) exception).Code.GetValueOrDefault() == 1 } }); var apiClient = new CrowdinApiClient(new CrowdinCredentials { AccessToken = \"<paste token here>\", Organization = \"optional organization (for Enterprise API)\" }, retryService: myRetryService); A custom retry service should also implement the IRetryService interface. Contribution If you would like to contribute please read the Contributing guidelines. Seeking Assistance If you find any problems or would like to suggest a feature, please feel free to file an issue on GitHub at the Issues Page . License The Crowdin .NET client is licensed under the MIT License. See the LICENSE file distributed with this work for additional information regarding copyright ownership. Except as contained in the LICENSE file, the name(s) of the above copyright holders shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization."
  }
}